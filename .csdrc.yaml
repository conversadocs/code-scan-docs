# CSD (Code Scan Docs) Configuration File (.csdrc.yaml)
# This file configures how csd analyzes your code and generates outputs

# Output directory for generated reports and documentation
output_dir: ".csd_output"

# Python executable to use for plugins (optional - will auto-detect if not specified)
# python_executable: "python"     # Default: auto-detect
# python_executable: "python3"    # For systems where python3 is preferred
# python_executable: "/path/to/specific/python"  # For custom installations

# LLM Configuration (Legacy - now configured per plugin)
llm:
  provider: "ollama"
  base_url: "http://localhost:11434"
  model: "deepseek-coder:6.7b"
  timeout_seconds: 30

# Scanning Configuration
scanning:
  # Patterns to ignore during scanning (glob patterns)
  ignore_patterns:
    - "config/"
    - "target/"
    - "tests/"
    - "*.log"
    - "*.md"
    - "LICENSE"
    - ".csd_cache/"

  # Whether to include hidden files/directories
  include_hidden: false

  # Maximum file size to analyze (in MB)
  max_file_size_mb: 10

# Input Plugin Configuration (Code Analyzers)
input_plugins:
  # Built-in Python plugin for analyzing Python code
  python:
    source:
      type: "builtin"
      plugin_type: "code"
      name: "python_analyzer"
    file_patterns:
      extensions: [".py"]
      filenames: ["requirements.txt", "setup.py", "pyproject.toml", "Pipfile", "poetry.lock", "tox.ini", "pytest.ini"]
      glob_patterns: ["requirements*.txt", "**/setup.py"]
    enabled: true
    config:
      analyze_docstrings: true
      check_type_hints: true

  # Built-in Rust plugin for analyzing Rust code
  rust:
    source:
      type: "builtin"
      plugin_type: "code"
      name: "rust_analyzer"
    file_patterns:
      extensions: [".rs"]
      filenames: ["Cargo.toml", "Cargo.lock", ".rustfmt.toml", "rust-toolchain.toml"]
      glob_patterns: ["**/Cargo.toml", "rust-toolchain*"]
    enabled: true
    config:
      analyze_unsafe: true
      check_documentation: true

# Output Plugin Configuration (Documentation Generators, Quality Analyzers, etc.)
output_plugins:
  # LLM-Enhanced Markdown documentation generator
  markdown_docs:
    source:
      type: "builtin"
      plugin_type: "docs"
      name: "markdown_docs"
    output_types: ["documentation"]
    formats: ["markdown"]
    enabled: true
    config:
      # LLM Configuration
      llm:
        provider: "ollama"
        base_url: "http://localhost:11434"
        model: "deepseek-coder:6.7b"
        timeout_seconds: 120
        max_tokens_per_request: 2000
        max_context_tokens: 1000
        temperature: 0.1
        top_p: 0.9

      # Template Configuration
      templates:
        use_existing_readme: true
        fallback_to_generated: true

      # Custom Prompts for Different Sections
      prompts:
        system_prompt: "You are a technical documentation expert. Generate clear, accurate, and helpful documentation based on code analysis. Be concise but thorough, and focus on practical information that helps users understand and use the code."

        section_prompts:
          installation: |
            Based on the project dependencies and build configuration, write clear installation instructions.
            Include:
            - Prerequisites and system requirements
            - Step-by-step installation commands
            - Verification steps to confirm installation
            - Common installation issues and solutions
            Use code blocks for commands and be specific about package managers and versions.

          usage: |
            Create practical usage examples based on the project structure and main functions.
            Include:
            - Basic "getting started" example
            - Common use cases with code examples
            - Expected inputs and outputs
            - Tips for effective usage
            Use working code examples that someone could copy and run.

          examples: |
            Create comprehensive, working examples that demonstrate the main functionality.
            Include:
            - Complete, runnable code examples
            - Expected outputs or results
            - Explanations of what each example demonstrates
            - Progressive complexity (simple to advanced)
            Base examples on the actual public API and typical usage patterns.

      # Processing Options
      processing:
        max_functions_per_section: 10
        include_private_functions: false
        include_test_examples: true
        context_priority: ["public_functions", "main_classes", "entry_points", "dependencies"]
        fallback_on_llm_failure: true

# Legacy plugin configuration (for backward compatibility)
# If you have an old configuration with "plugins:", it will be automatically
# migrated to the new input_plugins/output_plugins structure
